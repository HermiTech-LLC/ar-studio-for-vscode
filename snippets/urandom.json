{
    "random()": {
      "prefix": "random",
      "body": "random.random()",
      "description": "Return a random floating point number in the range [0.0, 1.0)."
    },
    "uniform(a, b)": {
      "prefix": "uniform",
      "body": "random.uniform(${1:a},${2:b})",
      "description": "Return a random floating point number N such that a <= N <= b for a <= b, and b <= N <= a for b < a."
    },
    "getrandbits(n)": {
      "prefix": "getrandbits",
      "body": "random.getrandbits(${1:n})",
      "description": "Return an integer with n random bits (0 <= n <= 32)"
    },
    "randint(a, b)": {
      "prefix": "randint",
      "body": "random.randint(${1:a}, ${2:b})",
      "description": "Return a random integer in the range [a, b]."
    },
    "randrange(stop)": {
        "prefix": "randrange",
        "body": "random.randrange(${1:stop})",
        "description": "returns a random integer from the range [0, stop)"
      },
      "randrange(start, stop,[step])": {
        "prefix": "randrange",
        "body": "random.randrange(${1:start}, ${2:stop},${3:step})",
        "description": "eturns a random integer from the range [start, stop) in steps of step. For instance, calling randrange(1, 10, 2) will return odd numbers between 1 and 9 inclusive"
      },
      "randrange(start, stop)": {
        "prefix": "randrange",
        "body": "random.randrange(${1:start}, ${2:stop})",
        "description": "returns a random integer from the range [start, stop) in steps of step. For instance, calling randrange(1, 10, 2) will return odd numbers between 1 and 9 inclusive."
      },
      
      "seed(n)": {
        "prefix": "seed",
        "body": "random.seed(${1:n})",
        "description": "Initialise the random number generator module with the seed n which should be an integer. When no argument (or None) is passed in it will (if supported by the port) initialise the PRNG with a true random number (usually a hardware generated random number)."
      },
      "choice(sequence)": {
        "prefix": "choice",
        "body": "random.choice(${1:sequence})",
        "description": "Chooses and returns one item at random from sequence (tuple, list or any object that supports the subscript operation)."
      }
  }
  