{
    "dump(obj, stream, separators)": {
      "prefix": "dump",
      "body": "json.dump(${1:obj}, ${2:stream}, ${2:separators})",
      "description": "Serialise obj to a JSON string, writing it to the given stream. If specified, separators should be an (item_separator, key_separator) tuple. The default is (', ', ': '). To get the most compact JSON representation, you should specify (',', ':') to eliminate whitespace."
    },
    "dumps(obj, separators)": {
      "prefix": "dumps",
      "body": "json.dumps(${1:obj},${2:separators})",
      "description": "Return obj represented as a JSON string.The arguments have the same meaning as in dump."
    },
    "load(stream)": {
      "prefix": "load",
      "body": "json.load(${1:stream})",
      "description": "Parse the given stream, interpreting it as a JSON string and deserialising the data to a Python object. The resulting object is returned. Parsing continues until end-of-file is encountered. A ValueError is raised if the data in stream is not correctly formed."
    },
    "loads(str)": {
      "prefix": "loads",
      "body": "json.loads(${1:str})",
      "description": "Parse the JSON str and return an object. Raises ValueError if the string is not correctly formed."
    }
  }
  
  