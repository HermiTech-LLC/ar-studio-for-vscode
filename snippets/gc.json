{
    "enable()": {
        "prefix": "enable",
        "body": "gc.enable()",
        "description" : "Enable automatic garbage collection."
    },
    "disable()": {
        "prefix": "disable",
        "body": "gc.disable()",
        "description" : "Disable automatic garbage collection. Heap memory can still be allocated, and garbage collection can still be initiated manually using gc.collect()."
    },
    "collect()": {
        "prefix": "collect",
        "body": "gc.collect()",
        "description" : "Run a garbage collection."
    },
    "mem_alloc()": {
        "prefix": "mem_alloc",
        "body": "gc.mem_alloc()",
        "description" : "Return the number of bytes of heap RAM that are allocated."
    },

    "mem_free()": {
        "prefix": "mem_free",
        "body": "gc.mem_free()",
        "description" : "Return the number of bytes of available heap RAM, or -1 if this amount is not known."
    },
    "threshold([amount])": {
        "prefix": "threshold",
        "body": "gc.threshold([amount])",
        "description" : "Set or query the additional GC allocation threshold. Normally, a collection is triggered only when a new allocation cannot be satisfied, i.e. on an out-of-memory (OOM) condition. If this function is called, in addition to OOM, a collection will be triggered each time after amount bytes have been allocated (in total, since the previous time such an amount of bytes have been allocated). amount is usually specified as less than the full heap size, with the intention to trigger a collection earlier than when the heap becomes exhausted, and in the hope that an early collection will prevent excessive memory fragmentation. This is a heuristic measure, the effect of which will vary from application to application, as well as the optimal value of the amount parameter."
    }
}
