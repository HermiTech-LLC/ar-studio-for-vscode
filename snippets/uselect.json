{
    "poll()": {
      "prefix": "poll",
      "body": "select.poll()",
      "description": "Create an instance of the Poll class."
    },
    "select(rlist, wlist, xlist,[timeout])": {
      "prefix": "select",
      "body": "select.select(${1:rlist}, ${2:wlist}, ${3:xlist},${4:[timeout]})",
      "description": "Wait for activity on a set of objects.This function is provided by some MicroPython ports for compatibility and is not efficient. Usage of Poll is recommended instead."
    },
    "register(obj[, eventmask])": {
      "prefix": "register",
      "body": "poll.register(${1:obj}, ${2:[eventmask]})",
      "description": "Register stream obj for polling. eventmask is logical OR of: select.POLLIN - data available for reading select.POLLOUT - more data can be written Note that flags like select.POLLHUP and select.POLLERR are not valid as input eventmask (these are unsolicited events which will be returned from poll() regardless of whether they are asked for). This semantics is per POSIX.eventmask defaults to select.POLLIN | select.POLLOUT. It is OK to call this function multiple times for the same obj. Successive calls will update obj’s eventmask to the value of eventmask (i.e. will behave as modify())."
    },
    "unregister(obj)": {
      "prefix": "unregister",
      "body": "poll.unregister(${1:obj})",
      "description": "Modify the eventmask for obj. If obj is not registered, OSError is raised with error of ENOENT"
    },
    "modify(obj, eventmask)": {
        "prefix": "modify",
        "body": "poll.modify(${1:obj}, ${1:eventmask})",
        "description": "Unregister obj from polling."
      },
      "poll(timeout)": {
        "prefix": "poll",
        "body": "poll.poll(${1:timeout})",
        "description": "Wait for at least one of the registered objects to become ready or have an exceptional condition, with optional timeout in milliseconds (if timeout arg is not specified or -1, there is no timeout).Returns list of (obj, event, …) tuples. There may be other elements in tuple, depending on a platform and version, so don’t assume that its size is 2. The event element specifies which events happened with a stream and is a combination of select.POLL* constants described above. Note that flags select.POLLHUP and select.POLLERR can be returned at any time (even if were not asked for), and must be acted on accordingly (the corresponding stream unregistered from poll and likely closed), because otherwise all further invocations of poll() may return immediately with these flags set for this stream again."
      },
      "poll.ipoll(timeout,flags)": {
        "prefix": "ipoll",
        "body": "poll.ipoll(${1:timeout},${2:flags})",
        "description": "Like poll.poll(), but instead returns an iterator which yields a callee-owned tuple. This function provides an efficient, allocation-free way to poll on streams. If flags is 1, one-shot behaviour for events is employed: streams for which events happened will have their event masks automatically reset (equivalent to poll.modify(obj, 0)), so new events for such a stream won’t be processed until new mask is set with poll.modify(). This behaviour is useful for asynchronous I/O schedulers."
      }
  }
  