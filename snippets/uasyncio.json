{
    "create_task(coro)": {
        "prefix": "create_task",
        "body": "uasyncio.create_task(${1:coro})",
        "description" : "Create a new task from the given coroutine and schedule it to run.Returns the corresponding Task object."
    },
    "current_task()": {
        "prefix": "current_task",
        "body": "uasyncio.current_task()",
        "description" : "Return the Task object associated with the currently running task."
    },
    "run(coro)": {
        "prefix": "run",
        "body": "uasyncio.run(${1:coro})",
        "description" : "Create a new task from the given coroutine and run it until it completes.Returns the value returned by coro."
    },
    "sleep(t)": {
        "prefix": "sleep",
        "body": "uasyncio.sleep(${1:t})",
        "description" : "The inverse of now(). Converts a dictionary provided into an epoch timestamp. The returned epoch value will be referenced from midnight on the 1st of January 1970."
    },
    "sleep_ms(t)": {
        "prefix": "sleep_ms",
        "body": "uasyncio.sleep_ms(${1:t})",
        "description" : "Sleep for t milliseconds.This is a coroutine, and a MicroPython extension."
    },
    "wait_for(awaitable, timeout)": {
        "prefix": "wait_for",
        "body": "uasyncio.wait_for(${1:awaitable} , ${2:timeout})",
        "description" : "Wait for the awaitable to complete, but cancel it if it takes longer than timeout seconds. If awaitable is not a task then a task will be created from it.If a timeout occurs, it cancels the task and raises uasyncio.TimeoutError: this should be trapped by the caller. The task receives uasyncio.CancelledError which may be ignored or trapped using try...except or try...finally to run cleanup code.Returns the return value of awaitable."
    },
    "wait_for_ms(awaitable, timeout)": {
        "prefix": "wait_for_ms",
        "body": "uasyncio.wait_for_ms(${1:awaitable},${2:timeout})",
        "description" : "Similar to wait_for but timeout is an integer in milliseconds. This is a coroutine, and a MicroPython extension."
    },
    "gather(*awaitables, return_exceptions)": {
        "prefix": "gather",
        "body": "uasyncio.gather(${1:awaitables}, ${2:return_exceptions})",
        "description" : "Run all awaitables concurrently. Any awaitables that are not tasks are promoted to tasks.Returns a list of return values of all awaitables."
    },
    "cancel()": {
        "prefix": "cancel",
        "body": "Task.cancel()",
        "description" : "Cancel the task by injecting uasyncio.CancelledError into it. The task may ignore this exception. Cleanup code may be run by trapping it, or via try ... finally."
    },

    "is_set()": {
        "prefix": "is_set",
        "body": "Event.is_set()",
        "description" : "Returns True if the event is set, False otherwise."
    },

    "set()": {
        "prefix": "set",
        "body": "Event.set()",
        "description" : "Set the event. Any tasks waiting on the event will be scheduled to run. Note: This must be called from within a task. It is not safe to call this from an IRQ, scheduler callback, or other thread. See ThreadSafeFlag."
    },

    "clear()": {
        "prefix": "clear",
        "body": "Event.clear()",
        "description" : "Clear the event."
    },
    "wait()": {
        "prefix": "wait",
        "body": "Event.wait()",
        "description" : "Wait for the event to be set. If the event is already set then it returns immediately.This is a coroutine."
    },
    "locked()": {
        "prefix": "locked",
        "body": "Lock.locked()",
        "description" : "Returns True if the lock is locked, otherwise False."
    },
    "acquire()": {
        "prefix": "acquire",
        "body": "Lock.acquire()",
        "description" : "Wait for the lock to be in the unlocked state and then lock it in an atomic way. Only one task can acquire the lock at any one time."
    },
    "release()": {
        "prefix": "release",
        "body": "Lock.release()",
        "description" : "Release the lock. If any tasks are waiting on the lock then the next one in the queue is scheduled to run and the lock remains locked. Otherwise, no tasks are waiting an the lock becomes unlocked."
    },
    "open_connection(host,port)": {
        "prefix": "open_connection",
        "body": "uasyncio.open_connection(${1:host}, ${2:port})",
        "description" : "Returns a pair of streams: a reader and a writer stream. Will raise a socket-specific OSError if the host could not be resolved or if the connection could not be made."
    },
    "start_server(callback, host, port, backlog)": {
        "prefix": "start_server",
        "body": "uasyncio.start_server(${1:callback}, ${2:host},${3:port},${4:backlog})",
        "description" : "Start a TCP server on the given host and port. The callback will be called with incoming, accepted connections, and be passed 2 arguments: reader and writer streams for the connection.Returns a Server object."
    },
    "get_extra_info(v)": {
        "prefix": "get_extra_info",
        "body": "Stream.get_extra_info(${1:v})",
        "description" : "Start a TCP server on the given host and port. The callback will be called with incoming, accepted connections, and be passed 2 arguments: reader and writer streams for the connection.Returns a Server object."
    },
    "close()": {
        "prefix": "close",
        "body": "Stream.close()",
        "description" : "Close the stream."
    },
    "wait_closed()": {
        "prefix": "wait_closed",
        "body": "Lock.wait_closed()",
        "description" : "WWait for the stream to close. This is a coroutine."
    },
    "read(n)": {
        "prefix": "read",
        "body": "Stream.read(${1:n})",
        "description" : "Release the lock. If any tasks are waiting on the lock then the next one in the queue is scheduled to run and the lock remains locked. Otherwise, no tasks are waiting an the lock becomes unlocked."
    },
    "readinto(buf)": {
        "prefix": "readinto",
        "body": "Stream.readinto(${1:buf})",
        "description" : "Read up to n bytes into buf with n being equal to the length of buf.Return the number of bytes read into buf.This is a coroutine, and a MicroPython extension."
    },
    "readexactly(n)": {
        "prefix": "readexactly",
        "body": "Stream.readexactly(${1:n})",
        "description" : "Read exactly n bytes and return them as a bytes object.Raises an EOFError exception if the stream ends before reading n bytes.This is a coroutine."
    },
    "readline()": {
        "prefix": "readline",
        "body": "Stream.readline()",
        "description" : "Read a line and return it.This is a coroutine."
    },



    "write(buf)": {
        "prefix": "write",
        "body": "Stream.write(${1:buf})",
        "description" : "Accumulated buf to the output buffer. The data is only flushed when Stream.drain is called. It is recommended to call Stream.drain immediately after calling this function."
    },
    "drain()": {
        "prefix": "drain",
        "body": "Stream.drain()",
        "description" : "Drain (write) all buffered output data out to the stream.This is a coroutine."
    },
    "Server.close()": {
        "prefix": "close",
        "body": "Server.close()",
        "description" : "Close the server."
    },
    "Server.wait_closed()": {
        "prefix": "wait_closed",
        "body": "Server.wait_closed()",
        "description" : "Wait for the server to close.This is a coroutine."
    },


    "get_event_loop()": {
        "prefix": "get_event_loop",
        "body": "uasyncio.get_event_loop()",
        "description" : "Return the event loop used to schedule and run tasks. See Loop. "
    },
    "new_event_loop()": {
        "prefix": "new_event_loop",
        "body": "uasyncio.new_event_loop()",
        "description" : "Reset the event loop and return it."
    }
}









