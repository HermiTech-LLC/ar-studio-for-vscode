name: Publish VS Code Extensions

on:
  push:
    branches:
      - linux

jobs:
  publish:
    runs-on: ubuntu-latest
    outputs:
      vsixFileName: ${{ steps.package.outputs.vsixFileName }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: linux

      - name: Restore Node.js cache
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: node-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            node-${{ runner.os }}-
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'
      
      
      - name: Cache Node.js dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: node-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            node-${{ runner.os }}-
      - name: Install dependencies
        run: npm install && npm install -g vsce
      - name: Package VSIX
        id: package
        run: |
          publisher=$(jq -r '.publisher' package.json)
          version=$(jq -r '.version' package.json)
          mkdir -p Release/linux/
          vsce package  $version --target linux-x64 linux-arm64 linux-armhf alpine-x64 alpine-arm64
          mv *.vsix Release/linux/
          echo "::set-output name=vsixFileName::Release/linux"

      - name: Check for VSIX files
        id: check_vsix_files
        run: |
          if [ -n "$(find Release/linux/ -name '*.vsix')" ]; then
            echo "VSIX files found."
            echo "::set-output name=vsix_found::true"
          else
            echo "No VSIX files found."
            echo "::set-output name=vsix_found::false"
          fi

      - name: Create Release
        if: steps.check_vsix_files.outputs.vsix_found == 'true'
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: latest
          release_name: ${{ steps.package.outputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload VSIX
        if: steps.check_vsix_files.outputs.vsix_found == 'true'
        uses: actions/upload-artifact@v2
        with:
          name: Brilliant_AR_Studio
          path: Release/

      - name: Attach artifact to release
        if: steps.check_vsix_files.outputs.vsix_found == 'true'
        run: |
          echo "Attaching artifact to release"
          upload_url=$(jq -r '.upload_url' $GITHUB_EVENT_PATH)
          upload_url=${upload_url%\{*}
          curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/zip" \
            --data-binary "@Release/linux/*.vsix" \
            "$upload_url?name=Brilliant_AR_Studio.zip"
